
	!from the current and target particle, it checks all regions immediately adjacent to the main space and checks if any of the particles are in range
	function inRange(pos1, pos2, upperBound, lowerBound, cutoff) result(success)
		implicit none
		real, dimension(1:3), intent(in) :: pos1, pos2
		real, dimension(1:3) :: upperBound, lowerBound
		real, intent(in) :: cutoff
		integer :: success
		real, dimension(1:3) :: temp, distanceFromLower, disFromLow 
		logical, dimension(3,2) :: activeSpaces
		logical, dimension(-1:1,-1:1,-1:1) :: spaceMultipliers
		integer :: cX, cY, cZ

		disFromlow = pos1 - lowerBound
		distanceFromLower = pos2 - lowerBound
		spaceMultipliers = .true.

		!six operations to try optimise
		!checking if the cut off distance even reaches the neighbouring regions 
		if ( (lowerBound(1) + -1*(upperBound(1)-lowerBound(1)) + distanceFromLower(1) + cutOff) < pos1(1) ) then
			spaceMultipliers(-1 ,-1:1, -1:1) = .false.
		end if

		 if ( (lowerBound(1) + 1*(upperBound(1)-lowerBound(1)) + distanceFromLower(1) - cutOff) > pos1(1) ) then
			spaceMultipliers(1 ,-1:1, -1:1) = .false.
		 end if

		 if ( (lowerBound(2) + -1*(upperBound(2)-lowerBound(2)) + distanceFromLower(2) + cutOff) < pos1(2) ) then
		 	spaceMultipliers(-1:1 ,-1, -1:1) = .false.
		 end if

		 if ( (lowerBound(2) + 1*(upperBound(2)-lowerBound(2)) + distanceFromLower(2) - cutOff) > pos1(2) ) then
		 	spaceMultipliers(-1:1, 1, -1:1) = .false.
		 end if

		 if ( (lowerBound(3) + -1*(upperBound(3)-lowerBound(3)) + distanceFromLower(3) + cutOff) < pos1(3) ) then
		 	spaceMultipliers(-1:1 ,-1:1, -1) = .false.
		 end if

		 if ( (lowerBound(3) + 1*(upperBound(3)-lowerBound(3)) + distanceFromLower(3) - cutOff) > pos1(3) ) then
		 	spaceMultipliers(-1:1, -1:1, 1) = .false.
		 end if

		success = 0

		do cX = -1, 1, 1
			do cY = -1, 1, 1
				do cZ = -1, 1, 1
					if (spaceMultipliers(cX,cY,cZ)) then
						temp(1) = lowerBound(1) + cX*(upperBound(1)-lowerBound(1))
						temp(2) = lowerBound(2) + cY*(upperBound(2)-lowerBound(2))
						temp(3) = lowerBound(3) + cZ*(upperBound(3)-lowerBound(3))
						!print *, vectorMod((temp+distanceFromLower)-pos1), &
						!&(vectorMod((temp+distanceFromLower)-pos1) < cutoff)
						if (vectorMod((temp+distanceFromLower)-pos1) < cutoff) then
							! print *, cX, cY, cZ, temp, distanceFromLower
							! print *, (temp+distanceFromLower)-pos1
							! print *, pos1, (temp+distanceFromLower), vectorMod((temp+distanceFromLower)-pos1)
							success = success + 1
							exit
						end if		
					end if		
				end do
				if (success > 0) exit
			end do
			if (success > 0) exit
		end do	
	end function inRange