	!its important to note that each process
	! function getAdjacantRegions(nprocs, currRank) result(adjacents)
	! 	integer, dimension(6) :: adjacents !xL xR, yU yD, zF zB
	! 	integer, intent(in) :: nprocs, currRank
	! 	integer :: totalPowerOfTwo, curr, i
	! 	integer :: numXSlices, numYSlices, numZSlices, usedProcs
	! 	integer, dimension(3) :: slicesToCurr, duplicateSlices

	! 	totalPowerOfTwo = 0 !2^0 is 1 so if only 1 processor is put in, it does it all

	! 	do i = 1, nprocs !nprocs is fine because one scales linearly and one scales exponentially
	! 		if (2**i > nprocs) then
	! 			exit
	! 		else
	! 			totalPowerOfTwo = i
	! 		end if
	! 	end do 

	! 	numXSlices = 0
	! 	numYSlices = 0
	! 	numZSlices = 0

	! 	!determines how many times it has been cut in each direction
	! 	usedProcs = 2**totalPowerOfTwo - 1 !as its 0 to 7 for eg not 1 to 8
	! 	do i = 0, usedProcs, 4
	! 		if (i+4 <= usedProcs) numZSlices = numZSlices + 1
	! 	end do 
	! 	usedProcs = usedProcs - numZSlices*4

	! 	do i = 0, usedProcs , 2
	! 		if (i+2 <= usedProcs) numYSlices = numYSlices + 1
	! 	end do 
	! 	usedProcs = usedProcs - numYSlices*2
		
	! 	numXSlices = usedProcs
	! 	!as above

	! 	!now do the same for the curr Process
	! 	slicesToCurr = 0
	! 	curr = currRank
	! 	do i = 0, curr, 4
	! 		if (i+4 <= curr) slicesToCurr(3) = slicesToCurr(3) + 1
	! 	end do 
	! 	curr = curr - slicesToCurr(3)*4

	! 	do i = 0, curr, 2
	! 		if (i+2 <= curr)slicesToCurr(2) = slicesToCurr(2) + 1
	! 	end do 
	! 	curr = curr - slicesToCurr(2)*2


	! 	slicesToCurr(1) = curr

	! 	!if (currRank == 6) print *, slicesToCurr
	! 	!now have the number of slices in in each direction to get to your process
	! 	!just going to do it line by line initially cus thats the easiest way
	! 	duplicateSlices = slicesToCurr

	! 	!left
	! 	duplicateSlices(1) = duplicateSlices(1) - 1
	! 	if (duplicateSlices(1) < 0) duplicateSlices(1) = numXSlices

	! 	adjacents(1) = (duplicateSlices(1) + duplicateSlices(2)*2 + duplicateSlices(3)*4)
	! 	duplicateSlices(1) = slicesToCurr(1)

	! 	!right
	! 	duplicateSlices(1) = duplicateSlices(1) + 1
	! 	if (duplicateSlices(1) > numXSlices) duplicateSlices(1) = 0

	! 	adjacents(2) = (duplicateSlices(1) + duplicateSlices(2)*2 + duplicateSlices(3)*4)
	! 	duplicateSlices(1) = slicesToCurr(1)

	! 	!down
	! 	duplicateSlices(2) = duplicateSlices(2) - 1
	! 	if (duplicateSlices(2) < 0) duplicateSlices(2) = numYSlices

	! 	adjacents(3) = (duplicateSlices(1) + duplicateSlices(2)*2 + duplicateSlices(3)*4)
	! 	duplicateSlices(2) = slicesToCurr(2)

	! 	!up
	! 	duplicateSlices(2) = duplicateSlices(2) + 1
	! 	if (duplicateSlices(2) > numYSlices) duplicateSlices(2) = 0

	! 	adjacents(4) = (duplicateSlices(1) + duplicateSlices(2)*2 + duplicateSlices(3)*4)
	! 	duplicateSlices(2) = slicesToCurr(2)

	! 	!backward
	! 	duplicateSlices(3) = duplicateSlices(3) - 1
	! 	if (duplicateSlices(3) < 0) duplicateSlices(3) = numZSlices

	! 	adjacents(5) = (duplicateSlices(1) + duplicateSlices(2)*2 + duplicateSlices(3)*4)
	! 	duplicateSlices(3) = slicesToCurr(3)

	! 	!forward
	! 	duplicateSlices(3) = duplicateSlices(3) + 1
	! 	if (duplicateSlices(3) > numZSlices) duplicateSlices(3) = 0

	! 	adjacents(6) = (duplicateSlices(1) + duplicateSlices(2)*2 + duplicateSlices(3)*4)
	! 	duplicateSlices(3) = slicesToCurr(3)

	! end function getAdjacantRegions

	! function determineBounds(nprocs, lowerBound, upperBound) result(boundaryRanges)
	! 	!this will return an array of 6 wide vectors for each processor, outlining what their boundaries shall be
	! 	!this program will be designed to only use a power of 2 number of processors and it will disregard any others
	! 	!it will do logical divisions, halving the total X, then Y then Z in a cycle for each power of two the number is
	! 	integer, intent(in) :: nprocs
	! 	real, dimension(3), intent(in) :: lowerBound, upperBound
	! 	real, dimension(3) :: maxBoundRange
	! 	integer, dimension(3) :: divsPerAxis !by default this will be the difference in lower vs upper bound,
	! 	!divsPerAxis will say how many times each axis have been cut, for easier looping later
	! 	integer :: totalPowerOfTwo, i, j, k, numProcessorsUsed, numAssignments
	! 	real, dimension(nprocs,6) :: boundaryRanges !this will store the ranges of processors, in order of Rank 0 -> max

	! 	totalPowerOfTwo = 0 !2^0 is 1 so if only 1 processor is put in, it does it all

	! 	do i = 1, nprocs !nprocs is fine because one scales linearly and one scales exponentially
	! 		if (2**i > nprocs) then
	! 			exit
	! 		else
	! 			totalPowerOfTwo = i
	! 		end if
	! 	end do 

	! 	do i = 1, nprocs
	! 		boundaryRanges(i, 1:6) = [0.0,0.0,0.0,0.0,0.0,0.0]
	! 	end do

	! 	numProcessorsUsed = 2**totalPowerOfTwo !this is how many of the process' will be used. Not a superb long term 
	! 	!solution but it makes the divisions easy

	! 	!now, it will begin the process of determine each boxes' max bounds range
	! 	maxBoundRange = upperBound - lowerBound
	! 	!the number of slices needed is the total powers of two

	! 	divsPerAxis = 1 !ignore if equal to zero !not zero because we want the loop to run at least once and if it doesnt get sliced the loop wont run

	! 	do i = 1, totalPowerOfTwo
	! 		j = max(1, mod(i, totalPowerOfTwo+1)) !so it repeats and is 1 and totalPowerOfTwo inclusive
	! 		! tested in lua in lua demo website curr = math.max(1, (curr+1) % (maxCount + 1))
	! 		!print *, i, j
	! 		maxBoundRange(j) = maxBoundRange(j) / 2
	! 		divsPerAxis(j) = divsPerAxis(j) + 1
	! 	end do 


	! 	numAssignments = 0
	! 	i = 0
	! 	j = 0
	! 	k = 0

	! 	!based on the previous calcualted values, it determines what the range of values each process will make use of
	! 	do while(numAssignments < numProcessorsUsed)
	! 		i = max(1, mod(i+1, divsPerAxis(1)+1))
	! 		if (i == 1) j = max(1, mod(j+1, divsPerAxis(2)+1))
	! 		if (i == 1 .and. j == 1) k = max(1, mod(k+1, divsPerAxis(3)+1))
	! 		!assigning values
	! 		numAssignments = numAssignments + 1


	! 		boundaryRanges(numAssignments, 1) = maxBoundRange(1)*(i-1)
	! 		boundaryRanges(numAssignments, 2) = maxBoundRange(2)*(j-1)
	! 		boundaryRanges(numAssignments, 3) = maxBoundRange(3)*(k-1)
	! 		boundaryRanges(numAssignments, 4) = maxBoundRange(1)*(i)
	! 		boundaryRanges(numAssignments, 5) = maxBoundRange(2)*(j)
	! 		boundaryRanges(numAssignments, 6) = maxBoundRange(3)*(k)
	! 	end do

	! 	! Use the below code to print the boundaries in a nice format
	! 	! 100 format("Lower : [", 3f10.7, "], Upper : [" 3f10.7, "]")
	! 	! do i = 1, nprocs
	! 	! 	print 100, boundaryRanges(i,1:3),boundaryRanges(i,4:6)
	! 	! end do
	! end function determineBounds
